public class EmailStats {
    
    public Map<string, ListEmail2> ListEmail2s {get;set;}
    public Map<string,Campaign2> Campaign2s {get;set;}
    public Id RecordId {get;set;}
    public Set<Id> ContactIds {get;set;}
    public Set<Id> LeadIds {get;set;}
    public List<String> TaskIds {get;set;}
    public Map<string,EmailStats2> EmailStatsList {get;set;}
    
    public EmailStats() {
        ContactIds = new Set<Id>();
        LeadIds = new Set<Id>();
        RecordId = ApexPages.currentPage().getParameters().get('id');
        ListEmail2s = new Map<string, ListEmail2>();
        EmailStatsList = new Map<string, EmailStats2>();
        TaskIds = new List<string>();
    }
    public void generateEmailStats2(List<Campaign> campaigns, List<ListEmail> listEmails) {
        Campaign2s = new Map<string,Campaign2>();
        for(Campaign c :campaigns)
        {
            Campaign2 c2 = new Campaign2(c.Id, c.Name);
            campaign2s.put(c.Id, c2);
            for (CampaignMember cm :c.CampaignMembers) {
                if (cm.Type == 'Lead')
                    LeadIds.add(cm.LeadId);
                else if (cm.Type == 'Contact')
                    ContactIds.add(cm.ContactId);
            }
        }
                
        for(ListEmail le :listEmails)
       {
            ListEmail2 le2 = mapListEmail(le);
            // Add to campaign
            Campaign2s.get(le.CampaignId).emailSends.put(le.Id, le2);
            // Add to global list
            ListEmail2s.put(le2.Id, le2);
        }
        List<Contact> contacts = getContacts(ContactIds);
        
        for(Contact c :contacts)
       {
      if (c.EmailStatuses.isEmpty())
                continue;
            for(EmailStatus es :c.EmailStatuses)
            {
                processEmailStatusForContact(c, es);
            }
    }
        List<Lead> leads = getLeads(LeadIds);

        for(Lead l :leads)
       {
      if (l.EmailStatuses.isEmpty())
                continue;
            for(EmailStatus es :l.EmailStatuses)
            {
                processEmailStatusForLead(l, es);
            }
    }
        system.debug(EmailStatsList);
        
        List<Task> tasks = [SELECT Id, WhatId from Task where Id in :taskIds];
        
        addEmailStatusToListEmail(tasks, EmailStatsList, ListEmail2s);
    }
    
    public void generateEmailStats() {
        
        List<Campaign> campaigns = getCampaigns(RecordId);
        List<ListEmail> listEmails = getListEmails(RecordId);
        
        generateEmailStats2(campaigns, listEmails);
    }
    
    public List<PieWedgeData> getPieData() {
        List<PieWedgeData> data = new List<PieWedgeData>();
        data.add(new PieWedgeData('Jan', 30));
        data.add(new PieWedgeData('Feb', 15));
        data.add(new PieWedgeData('Mar', 10));
        data.add(new PieWedgeData('Apr', 20));
        data.add(new PieWedgeData('May', 20));
        data.add(new PieWedgeData('Jun', 5));
        return data;
    }
    
    public List<BarStackData> getBarStackData() {
        if (Campaign2s == null)
          generateEmailStats();
        system.debug(Campaign2s);
        Map<string, BarStackData> barStackData = new Map<string, BarStackData>();
        for(Campaign2 c :Campaign2s.values())
        {
            for (ListEmail2 le2 :c.emailSends.values()) {
                system.debug(le2);
                for (EmailStats2 es :le2.emailStats) {
                    if (!barStackData.containsKey(le2.emailSubject))
                        barStackData.put(le2.emailSubject, new BarStackData(le2.emailSubject, le2.createdDate,0,0));
                    if (es.timesOpened > 0)
                        barStackData.get(le2.emailSubject).opened++;
                    else
                        barStackData.get(le2.emailSubject).notOpened++;
                }
            }
        }
              
        return barStackData.values();
    }

    public List<Campaign> getCampaigns(Id campaignId) {
        return (RecordId==null)
            ?[SELECT Id, Name,(SELECT Id, Name, Type, LeadId, ContactId from CampaignMembers) FROM Campaign ORDER BY CreatedDate DESC]
            :[SELECT Id, Name,(SELECT Id, Name, Type, LeadId, ContactId from CampaignMembers) FROM Campaign WHERE Id = :RecordId ORDER BY CreatedDate DESC];       
    }

    public List<ListEmail> getListEmails(Id campaignId) {
        return (campaignId==null)
            ?[SELECT id, subject, status, createdDate, campaignId FROM ListEmail WHERE campaignId <> null ORDER BY CreatedDate DESC]
            :[SELECT id, subject, status, createdDate, campaignId FROM ListEmail WHERE campaignId = :campaignId ORDER BY CreatedDate DESC];
    }

    public List<Contact> getContacts(Set<Id> ids) {
        return [SELECT Id, Name, Email, (
          SELECT id, taskId, whoId, createdDate, firstOpenDate, lastOpenDate, timesOpened, emailTemplateName
          FROM EmailStatuses
        )   FROM Contact WHERE Id IN :ids];
    }

    public List<Lead> getLeads(Set<Id> ids) {
        return [SELECT Id, Name, Email, (
          SELECT id, taskId, whoId, createdDate, firstOpenDate, lastOpenDate, timesOpened, emailTemplateName
          FROM EmailStatuses
        )   FROM Lead WHERE Id IN :ids];
    }

    public ListEmail2 mapListEmail(ListEmail le) {
        ListEmail2 le2 = new ListEmail2(le.Id);
        le2.createdDate = le.CreatedDate;
        le2.listEmailStatus = le.Status;
        le2.emailSubject = le.Subject;
        return le2;
    }

    public void processEmailStatusForContact(Contact c, EmailStatus es) {
        TaskIds.add(es.TaskId);
        EmailStats2 es2 = new EmailStats2(es.Id);
        es2.contactName = c.Name;
        es2.contactEmail = c.Email;
        es2.taskId = es.TaskId;
        es2.firstOpenDate = es.FirstOpenDate;
        es2.lastOpenDate = es.LastOpenDate;
        es2.timesOpened = es.TimesOpened;
        es2.emailTemplateName = es.EmailTemplateName;
        es2.createdDate = es.CreatedDate;
        EmailStatsList.put(es2.taskId,es2);
    }

    public void processEmailStatusForLead(Lead l, EmailStatus es) {
        TaskIds.add(es.TaskId);
        EmailStats2 es2 = new EmailStats2(es.Id);
        es2.contactName = l.Name;
        es2.contactEmail = l.Email;
        es2.taskId = es.TaskId;
        es2.firstOpenDate = es.FirstOpenDate;
        es2.lastOpenDate = es.LastOpenDate;
        es2.timesOpened = es.TimesOpened;
        es2.emailTemplateName = es.EmailTemplateName;
        es2.createdDate = es.CreatedDate;
        EmailStatsList.put(es2.taskId,es2);
    }

    public void addEmailStatusToListEmail(List<Task> tasks, Map<string, EmailStats2> estats, Map<string, ListEmail2> lemails) {
        for(Task t :tasks)
       {
      if (estats.containsKey(t.Id) && lemails.containsKey(t.WhatId)) {
                    lemails.get(t.WhatId).emailStats.add(estats.get(t.Id));
            }
        }
    }


// #region Wrapper classes

    // Wrapper class
    public class PieWedgeData {

        public String name { get; set; }
        public Integer data { get; set; }

        public PieWedgeData(String name, Integer data) {
            this.name = name;
            this.data = data;
        }
    }
    
    // Wrapper class
    public class BarStackData {

        public String name { get; set; }
        public DateTime created { get; set; }
        public String names { get; set; }
        public Integer opened { get; set; }
        public Integer notOpened { get; set; }

        public BarStackData(String name, DateTime created, Integer opened, Integer notOpened) {
            this.name = name;
            this.names = created.format('MMM-dd')+'\n'+name.left(15);
            this.created = created;
            this.opened = opened;
            this.notOpened = notOpened;
        }
    }
    
    public class Campaign2 {

        public String name { get; set; }
        public String Id { get; set; }
        public List<ListEmail> listEmails { get; set; }
        public Map<string, ListEmail2> emailSends { get; set; }
        public List<Id> contactIds {get;set;}
      public List<Id> leadIds {get;set;}

        public Campaign2(String id, string name) {
            this.name = name;
            this.Id = id;
            this.listEmails = new List<ListEmail>();
            this.emailSends = new Map<string, ListEmail2>();
            this.leadIds = new List<Id>();
            this.contactIds = new List<Id>();
        }
    }
    
    public class ListEmail2 {

        public String id { get; set; }
        public String listEmailStatus { get; set; }
        public String emailSubject { get; set; }
        public DateTime createdDate { get; set; }
        
        public List<EmailStats2> emailStats { get; set; }

        public ListEmail2(string id) {
            this.Id = id;
            emailStats = new List<EmailStats2>();
        }
    }
    
    public class EmailStats2 {

        public String id { get; set; }
        public String contactName { get; set; }
        public String contactEmail { get; set; }
        public String taskId { get; set; }
        public String whoId { get; set; }
        public DateTime createdDate { get; set; }
        public DateTime firstOpenDate { get; set; }
        public DateTime lastOpenDate { get; set; }
        public Integer timesOpened { get; set; }
        public String emailTemplateName { get; set; }

        public EmailStats2(string id) {
            this.Id = id;
        }
    }

    // #endregion Wrapper classes
}